[spring 01]

1. 툴

 	1) IED : STS4
 		https://spring.io/ > Projects > Spring Tools 4
 		

2. Framework 프레임 워크

 	SpringMVC	: 웹 프로그래밍 기반
 	SpringAOP	: 설계 기반
 	SpringBoot	: 모든 설계 환경들을 합쳐놓은것.


3. Spring Framework

 	스프링 버전에 따른 눈에 띄는 변화
 	2.5 : 어노테이션을 활용하는 설정 도입, 편리한 설정과 개발 가능
 	3.0 : 별도의 설정없이도 Java 클래스만으로 설정 파일을 대신할 수 있게 지원
 	4.0 : 모바일 환경과 웹 환경에서 많이 사용되는 REST 방식의 컨트롤러 지원
 	5.0 : Reactor를 이용한 Reactive 스타일의 개발 환경 지원

 	1) 특징
 		- POJO 기반 구성 : Plain Old Java Object 
 			: 일반적인 자바코드를 이용해 객체를 구성하는 방식을 그대로
 			Spring에서 사용할 수 있다.
 		- MVC 웹프레임워크 제공 : MVC 모델 가지고 있다.

 		- DI : Dependecy Injection 의존성 주입 *(중요)
 			객체를 대여하는 개념.
 			무분별한 객체생성을 줄여서 메모리 낭비 최소화하기 위한 방법
IoC : Inversion of Control   제어의 역전

 		- AOP : Aspect Oriented Programming   관점지향프로그래밍	

 			POP 절차지향	Process Oriented Programming 	: C
 			OOP 객체지향	Object Oriented Programming	: Java, C++
 			AOP 관점지향	시점을 달리하는 프로그래밍기법	: framework


4. 세팅
	

 	1) Spring 개발환경 세팅

 		필요 요소 (우리 수업 기준)
 	 	- Java	: JDK 11 (환경변수 설정)
	 	- IDE 	: STS3 (Eclipse)
	 	- 서버 	: Tomcat 9
	 	- DB	: 오라클 19c
	 	- SQLDeveloper : DBMS tool
	
	3) IDE : STS Eclipse
 	 	Eclipse	: DynamicWebProject 로 생성 → Maven , gradle로 변환
 	 	STS
 	 	IntelliJ
	
	4) 프로젝트 생성 방식 (라이브러리 관리 방식에 따라 구분)

 		Spring 기본방식 : (offline 작업) Spring 라이브러리 다운받아 lib 폴더에 넣기
 		Spring Maven 방식 : (online) 라이브러리 관리하는 방식
 		Spring Gradle 방식 : (online) 라이브러리 관리하는 방식

 	5) 사용할 방식 
 		Spring MVC Maven
 		Spring 5
 		STS 3 Eclipse
		
		1)  STS3 다운로드
 		#1. https://spring.io/ > Projects > Spring Tools 4
			> 하단으로 내려가서 Spring Tools Suite 3 wiki 링크 선택
		(https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3)
			> Latest STS3 Download > full distribution on Eclipse 4.21 버전 
 				운영체제에 맞춰 다운받기


		2)  STS 설치 : 한글 포함안된(데스크탑, 내문서등도 안됨) 경로에 
 				  배치하고 압축해제  > sts.exe 파일 실행
 
 			#1. window > Preferences > ‘encoding’ > 전부 UTF-8 변경
			#2. 폰트 변경 (선택)

		3) 서버 세팅
			Tomcat 9.0

		4) 프로젝트 생성
			File > new > Spring Legacy Project
			>	Project name 	: 프로젝트명
 				Templates		: Spring MVC Project 선택
 			> 기본 패키지 : 3단계로 작성. 보통 웹사이트 역순 ex) com.naver.project명
 			> Finish! > 오른쪽 하단 로딩바 다운로드 완료까지 대기
 		* 폴더 / 패키지 구성
		src/main/java			: 자바 클래스들 (실제 프로젝트 메인 코드들)
		src/main/resources		: 자바 프로그래밍에 필요한 보조 파일들
		src/main/java			:테스트 클래스
		src/main/resources		: 테스트시 필요한 보조 파일듯

		src
			main
				webapp
					resources	: js , css , 이미지 등 위치할 폴더
					WEB-INF
						classes  : 컴파일된 실행 파일들 위치(우리는 사용 X)
						spring
							appServlet
								- servlet-context.xml
								- root-context.xml : 프로젝트에서
 									공용으로 설정할 정보 작성하는 파일
						views
							- jsp 파일들 위치할 곳
	
	pom.xml : maven 방식으로 라이브러리 설정하는 파일


 		5) 라이브러리 세팅 (pom.xml)
 	- java - version 11 로 변경
 	google lombok 검색 > projectlombok.org에서 다운 > lombok.jar 실행 > 경로찾기 >
 	spring sts.exe 찾아넣고 install	> 종료 후 재시작
	> pom.xml 에서 dependency 에 lombok 추가 (Maven repository usages 높은것)
	버전 같은걸로 주의
	
	

 	classes 는 java package 에서 컴파일한 파일 저장됨
	spring 스프링세팅들
 	경로상에 WEB-INF 가 있으면 접속이 안됨
	프로젝트명 > properties  > Maven > java > java11 로 변경

2. Spring 과 Oracle DataBase 연동

	1) JDBC 연결
		- 라이브러리 : ojdbc8 디펜던시 추가
3. 테스트
	dependency : spring-test
1) 테스트란 ?
 		TDD Test Driven Development : 테스트 주도 개발
 		단위 테스트 : Unit test : 작은 단위의 테스트, 개발자 테스트

2)  JUnit : 프레임 워크
	: 자바 테스팅 프레임 워크
		
		#1. JUnit 프레임 워크 사용시, 테스트 클래스 요구 조건
			- 테스트 적용 메서드 public 선언
			- 리턴타입 void, 매개없는 메서드
			- 메서드 위 @Test 어노테이션 기술




	spring 변경사항

	<java-version>11</java-version>
	<org.aspectj-version>1.9.3</org.aspectj-version>
	<org.slf4j-version>1.7.30</org.slf4j-version>

 	<plugin>
 	                <groupId>org.apache.maven.plugins</groupId>
 	에서~
 	<source>11</source>
 	<target>11</target>
 	11(java임)로 변경

 	<groupId>log4j</groupId> 의 <dependency> 전부 주석처리후 
 		<!--	log4j (수업은 1.2.x로) 
 			 https://mvnrepository.com/artifact/log4j/log4j -->
 			<dependency>
 			    <groupId>log4j</groupId>
 			    <artifactId>log4j</artifactId>
 			    <version>1.2.17</version>
 			</dependency>
 	추가하기

 	<groupId>javax.servlet</groupId> 의 <version>2.5</version> 전체를 주석 처리 후

 	 <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
 		<dependency>
 		    <groupId>javax.servlet</groupId>
 		    <artifactId>javax.servlet-api</artifactId>
 		    <version>3.1.0</version>
 		    <scope>provided</scope>
 		</dependency>
 	추가하기

 	<version>4.12</version> 를 Test : 4.7을 4.12로 변경









	spring 추가사항
	Maven repository

	<!-- 테스트 하기위한 라이브러리 (scope 삭제)
	 https://mvnrepository.com/artifact/org.springframework/spring-test -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
	<!-- 롬복 : getter/setter/toString/생성자 등 자동생성해주는 라이브러리 
	 https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.24</version>
		    <scope>provided</scope>
		</dependency>

	<!-- DB 관련 라이브러리 -->
	<!-- ojdbc8 : https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
		<dependency>
		    <groupId>com.oracle.database.jdbc</groupId>
		    <artifactId>ojdbc8</artifactId>
		    <version>19.3.0.0</version>
		</dependency>
<!-- 커넥션 풀 API : https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
		<dependency>
		    <groupId>com.zaxxer</groupId>
		    <artifactId>HikariCP</artifactId>
		    <version>3.4.5</version>
		</dependency>



메모 
transaction = commit 과 commit 사이 최소 단위
송금 시스템 송금자 돈빼기 commit 1번 받는자 돈넣기 commit 1번 
총 2번

@Controller 컨트롤러 어노테이션 (컨트롤러 역할을 함)

app = application
설정= context

사진 참조 
spr5_02_4_spring-mvc-context-hierarchy.jpg
spring/ root.xml 과 servlet.xml 안에 들어가는것 구분
spring bean 자바(스프링) 객체들

Root Context: Service(비즈니스로직처리), DB관련 설정
Controller , HandMapping , ViewResolver 관련 설정
